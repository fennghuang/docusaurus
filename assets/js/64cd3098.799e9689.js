"use strict";(self.webpackChunkwechaty_docusaurus=self.webpackChunkwechaty_docusaurus||[]).push([[8500],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>g});var o=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,o,n=function(e,a){if(null==e)return{};var t,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var m=o.createContext({}),u=function(e){var a=o.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},c=function(e){var a=u(e.components);return o.createElement(m.Provider,{value:a},e.children)},p="mdxType",i={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},d=o.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,m=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),d=n,g=p["".concat(m,".").concat(d)]||p[d]||i[d]||l;return t?o.createElement(g,r(r({ref:a},c),{},{components:t})):o.createElement(g,r({ref:a},c))}));function g(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,r=new Array(l);r[0]=d;var s={};for(var m in a)hasOwnProperty.call(a,m)&&(s[m]=a[m]);s.originalType=e,s[p]="string"==typeof e?e:n,r[1]=s;for(var u=2;u<l;u++)r[u]=t[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85162:(e,a,t)=>{t.d(a,{Z:()=>r});var o=t(67294),n=t(86010);const l="tabItem_Ymn6";function r(e){let{children:a,hidden:t,className:r}=e;return o.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,r),hidden:t},a)}},65488:(e,a,t)=>{t.d(a,{Z:()=>d});var o=t(87462),n=t(67294),l=t(86010),r=t(72389),s=t(67392),m=t(7094),u=t(12466);const c="tabList__CuJ",p="tabItem_LNqP";function i(e){const{lazy:a,block:t,defaultValue:r,values:i,groupId:d,className:g}=e,y=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=i??y.map((e=>{let{props:{value:a,label:t,attributes:o}}=e;return{value:a,label:t,attributes:o}})),k=(0,s.l)(h,((e,a)=>e.value===a.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===r?r:r??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==v&&!h.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:b}=(0,m.U)(),[T,w]=(0,n.useState)(v),N=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=d){const e=f[d];null!=e&&e!==T&&h.some((a=>a.value===e))&&w(e)}const R=e=>{const a=e.currentTarget,t=N.indexOf(a),o=h[t].value;o!==T&&(O(a),w(o),null!=d&&b(d,String(o)))},x=e=>{let a=null;switch(e.key){case"Enter":R(e);break;case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;a=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;a=N[t]??N[N.length-1];break}}a?.focus()};return n.createElement("div",{className:(0,l.Z)("tabs-container",c)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},g)},h.map((e=>{let{value:a,label:t,attributes:r}=e;return n.createElement("li",(0,o.Z)({role:"tab",tabIndex:T===a?0:-1,"aria-selected":T===a,key:a,ref:e=>N.push(e),onKeyDown:x,onClick:R},r,{className:(0,l.Z)("tabs__item",p,r?.className,{"tabs__item--active":T===a})}),t??a)}))),a?(0,n.cloneElement)(y.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},y.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==T})))))}function d(e){const a=(0,r.Z)();return n.createElement(i,(0,o.Z)({key:String(a)},e))}},62490:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>m,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var o=t(87462),n=(t(67294),t(3905)),l=t(65488),r=t(85162);const s={slug:"/howto/degraded/degraded-room-md",title:"Managing rooms"},m=void 0,u={unversionedId:"howto/degraded/degraded-room",id:"howto/degraded/degraded-room",title:"Managing rooms",description:'Managing room is one of the important features in Wechaty. The word "room" here refers to Wechat rooms (also called groups).',source:"@site/docs/howto/degraded/degraded-room.md",sourceDirName:"howto/degraded",slug:"/howto/degraded/degraded-room-md",permalink:"/docs/howto/degraded/degraded-room-md",draft:!1,editUrl:"https://github.com/wechaty/docusaurus/edit/main/docusaurus/docs/howto/degraded/degraded-room.md",tags:[],version:"current",lastUpdatedBy:"Yuan Gao",lastUpdatedAt:1672114905,formattedLastUpdatedAt:"Dec 27, 2022",frontMatter:{slug:"/howto/degraded/degraded-room-md",title:"Managing rooms"}},c={},p=[{value:"Creating New Room",id:"creating-new-room",level:2},{value:"Adding contact to room",id:"adding-contact-to-room",level:2},{value:"Remove contact from room",id:"remove-contact-from-room",level:2},{value:"Changing topic of the room",id:"changing-topic-of-the-room",level:2},{value:"Mention(@) others in the room",id:"mention-others-in-the-room",level:2},{value:"Moniting room events",id:"moniting-room-events",level:2}],i={toc:p};function d(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,o.Z)({},i,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,'Managing room is one of the important features in Wechaty. The word "room" here refers to Wechat rooms (also called groups).\nYou can instruct the bot to create a new room, change the topic (or name) of the room, add a contact to a specific room, remove a contact from a room, and mention(@) someone in the room.'),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"A Room can be identified by either groupId or room topic (room name)")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"creating-new-room"},"Creating New Room"),(0,n.kt)(l.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},"from __future__ import annotations\nfrom typing import List\n\nfrom wechaty import (\n    Wechaty,\n    Contact,\n    Room,\n    Message\n)\n\n\nclass MyBot(Wechaty):\n    async def on_ready(self, _):\n        \"\"\"creating room\"\"\"\n        # 1. filter friend\n        friends: List[Contact] = await self.Contact.find_all()\n        # find my python-wechaty related friends\n        friends = [friend for friend in friends if friend.alias().startswith('python-wechaty')]\n\n        # 2. create room and invite them\n        room: Room = await self.Room.create(friends, topic='Python\u2764Wechaty')\n        if room:\n            room.say('hello, python-wechaty is ready for you.')\n"))),(0,n.kt)(r.Z,{value:"go",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"php",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"csharp",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,n.kt)("h2",{id:"adding-contact-to-room"},"Adding contact to room"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"add")," accepts 'Contact' as an argument. You can get the Contact by using ",(0,n.kt)("inlineCode",{parentName:"p"},"msg.talker()"),"."),(0,n.kt)(l.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  Contact,\n  Wechaty,\n  log,\n  Room,\n} from 'wechaty'\n\n//helper function\nasync function putInRoom(person: Contact, room: Room) {\n  //Add a log\n  log.info(\"Bot\", 'putInRoom(\"%s\", \"%s\")', contact.name(), await room.topic());\n\n  try {\n    //Try put the person into the room\n    await room.add(person);\n  } catch (e) {\n    //any error will be here\n    log.error(\"Bot\", \"putInRoom() exception: \" + e.stack);\n  }\n}\n\n//in the main code\n//If the secrete code is ding\nif (msg.text() === 'ding') {\n  //get the Person/Contact\n  const from = msg.talker();\n\n  //find the targetRoom from the bot's room list\n  //Option1: by group id\n  //set the targetRoomId\n  const tagetRoomId = '12345678910@chatroom'\n  const targetRoom = await bot.Room.find({id: tagetRoomId})\n  //Option2: by group name\n  // const tagetRoomTopic =  'testGroup'\n  // const targetRoom = await bot.Room.find({topic:tagetRoomTopic})\n  if (targetRoom instanceof Room) {\n    await putInRoom(from, targetRoom);\n  } else {\n    log.info('Cannot find room, unable to put the person into the room')\n  }\n}\n"))),(0,n.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},'from __future__ import annotations\nfrom typing import List\n\nfrom wechaty import (\n    Wechaty,\n    Contact,\n    Room,\n    Message\n)\n\n\nclass MyBot(Wechaty):\n\n    async def on_message(self, msg: Message):\n        """add friend to room if they send `python-wechaty` keyword to be"""\n\n        # invite someone to the room by keyword<python-wechaty>\n        if msg.text() == \'python-wechaty\':\n            talker: Contact = await msg.talker()\n            room: Room = await msg.room()\n            mention_self: bool = await msg.mention_self()\n            python_wechaty_room: Room = await self.Room.find(query=\'id-of-your-room\')\n            if room:\n                if mention_self:\n                    await python_wechaty_room.add(talker)\n            else:\n                await python_wechaty_room.add(talker)\n'))),(0,n.kt)(r.Z,{value:"go",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"php",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"csharp",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,n.kt)("h2",{id:"remove-contact-from-room"},"Remove contact from room"),(0,n.kt)(l.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},"from __future__ import annotations\nfrom typing import List\n\nfrom wechaty import (\n    Wechaty,\n    Contact,\n    Room,\n    Message\n)\n\n\nclass MyBot(Wechaty):\n\n    async def on_message(self, msg: Message):\n        room: Room = await msg.room()\n        if room:\n            # func<is_dangerous_words> is to detect whether the content is dangerous\n            if is_dangerous_words(msg.text()):\n                talker: Contact = await msg.talker()\n                room.delete(talker)\n"))),(0,n.kt)(r.Z,{value:"go",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"php",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"csharp",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,n.kt)("h2",{id:"changing-topic-of-the-room"},"Changing topic of the room"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"topic")," accepts a ",(0,n.kt)("inlineCode",{parentName:"p"},"String")," as an argument.\nYou can find the ",(0,n.kt)("inlineCode",{parentName:"p"},"Room")," by either room name (a ",(0,n.kt)("inlineCode",{parentName:"p"},"String"),") or room id (format '12345678910@chatroom')"),(0,n.kt)(l.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  Wechaty,\n  log,\n  Room,\n} from 'wechaty'\n//helper function\nasync function changeRoomTopic(room: Room) {\n  log.info(\"Bot\", 'changing room topic for group', await room.topic());\n  const newName =\"newName\"\n  try {\n    await room.topic(newName);\n    \n  } catch (e) {\n    log.error(\"Bot\", \"changeRoomTopic() exception: \" + e.stack);\n  }\n\n  //Option1: by group id\n  //set the targetRoomId\n  const tagetRoomId = '12345678910@chatroom'\n  const targetRoom = await bot.Room.find({id: tagetRoomId})\n  //Option2: by group name\n  // const tagetRoomTopic = 'ceshiqun'\n  // const targetRoom = await bot.Room.find({topic:tagetRoomTopic})\n  if (targetRoom instanceof Room) {\n    await changeRoomTopic(targetRoom);\n  } else {\n    log.info('cannot find room, unable to changeRoomTopic')\n  }\n  \n}\n\n"))),(0,n.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},"from __future__ import annotations\nfrom typing import List\n\nfrom wechaty import (\n    Wechaty,\n    Room,\n    Message\n)\n\n\nclass MyBot(Wechaty):\n\n    async def on_message(self, msg: Message):\n        \"\"\"change room topic by token\"\"\"\n        room: Room = await msg.room()\n        if not room:\n            return\n\n        text: str = await msg.text()\n        talker: Contact = await msg.talker()\n        keyword = 'new-topic:'\n        if talker.alias() == 'admin' and text.startswith(keyword):\n            new_topic: str = text[len(keyword):]\n            old_topic: str = await room.topic()\n            await room.say(f'ok, I will change old_topic<{old_topic}> to new_topic<{new_topic}>')\n            \n            # change the topic of room\n            await room.topic(new_topic)\n"))),(0,n.kt)(r.Z,{value:"go",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"php",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"csharp",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,n.kt)("h2",{id:"mention-others-in-the-room"},"Mention(@) others in the room"),(0,n.kt)(l.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"await room.say`Hello, ${contact}`\n"))),(0,n.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"await room.say`Hello, ${contact}`\n"))),(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},"# TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"go",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"php",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"csharp",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,n.kt)(r.Z,{value:"rust",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,n.kt)("h2",{id:"moniting-room-events"},"Moniting room events"),(0,n.kt)("p",null,"TBW ..."))}d.isMDXComponent=!0}}]);