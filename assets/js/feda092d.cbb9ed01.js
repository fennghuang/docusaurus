"use strict";(self.webpackChunkwechaty_docusaurus=self.webpackChunkwechaty_docusaurus||[]).push([[9177],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>g});var n=t(67294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function r(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=n.createContext({}),u=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},m=function(e){var a=u(e.components);return n.createElement(p.Provider,{value:a},e.children)},c="mdxType",i={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),c=u(t),d=l,g=c["".concat(p,".").concat(d)]||c[d]||i[d]||o;return t?n.createElement(g,s(s({ref:a},m),{},{components:t})):n.createElement(g,s({ref:a},m))}));function g(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var o=t.length,s=new Array(o);s[0]=d;var r={};for(var p in a)hasOwnProperty.call(a,p)&&(r[p]=a[p]);r.originalType=e,r[c]="string"==typeof e?e:l,s[1]=r;for(var u=2;u<o;u++)s[u]=t[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85162:(e,a,t)=>{t.d(a,{Z:()=>s});var n=t(67294),l=t(86010);const o="tabItem_Ymn6";function s(e){let{children:a,hidden:t,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(o,s),hidden:t},a)}},65488:(e,a,t)=>{t.d(a,{Z:()=>d});var n=t(87462),l=t(67294),o=t(86010),s=t(72389),r=t(67392),p=t(7094),u=t(12466);const m="tabList__CuJ",c="tabItem_LNqP";function i(e){const{lazy:a,block:t,defaultValue:s,values:i,groupId:d,className:g}=e,v=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=i??v.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),k=(0,r.l)(y,((e,a)=>e.value===a.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===s?s:s??v.find((e=>e.props.default))?.props.value??v[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:T}=(0,p.U)(),[f,N]=(0,l.useState)(b),w=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=d){const e=h[d];null!=e&&e!==f&&y.some((a=>a.value===e))&&N(e)}const P=e=>{const a=e.currentTarget,t=w.indexOf(a),n=y[t].value;n!==f&&(O(a),N(n),null!=d&&T(d,String(n)))},x=e=>{let a=null;switch(e.key){case"Enter":P(e);break;case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;a=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;a=w[t]??w[w.length-1];break}}a?.focus()};return l.createElement("div",{className:(0,o.Z)("tabs-container",m)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},g)},y.map((e=>{let{value:a,label:t,attributes:s}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:f===a?0:-1,"aria-selected":f===a,key:a,ref:e=>w.push(e),onKeyDown:x,onClick:P},s,{className:(0,o.Z)("tabs__item",c,s?.className,{"tabs__item--active":f===a})}),t??a)}))),a?(0,l.cloneElement)(v.filter((e=>e.props.value===f))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},v.map(((e,a)=>(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==f})))))}function d(e){const a=(0,s.Z)();return l.createElement(i,(0,n.Z)({key:String(a)},e))}},96277:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>p,default:()=>d,frontMatter:()=>r,metadata:()=>u,toc:()=>c});var n=t(87462),l=(t(67294),t(3905)),o=t(65488),s=t(85162);const r={title:"Listen to events"},p=void 0,u={unversionedId:"howto/event",id:"howto/event",title:"Listen to events",description:"The wechaty bot is available in various programming languages!",source:"@site/docs/howto/event.mdx",sourceDirName:"howto",slug:"/howto/event",permalink:"/docs/howto/event",draft:!1,editUrl:"https://github.com/wechaty/docusaurus/edit/main/docusaurus/docs/howto/event.mdx",tags:[],version:"current",lastUpdatedBy:"Abhishek Jaiswal",lastUpdatedAt:1634707553,formattedLastUpdatedAt:"Oct 20, 2021",frontMatter:{title:"Listen to events"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/howto/"},next:{title:"Dealing with message",permalink:"/docs/howto/message"}},m={},c=[{value:"Getting started",id:"getting-started",level:2},{value:"Basic Events",id:"basic-events",level:2},{value:"<code>scan</code> Event",id:"scan-event",level:3},{value:"<code>login</code> Event: bot contact",id:"login-event-bot-contact",level:3},{value:"<code>logout</code> Event",id:"logout-event",level:3},{value:"<code>message</code> Event",id:"message-event",level:3},{value:"<code>friendship</code> Event: friend requests",id:"friendship-event-friend-requests",level:3},{value:"Room Events",id:"room-events",level:2},{value:"<code>room-topic</code> Event: messages",id:"room-topic-event-messages",level:3},{value:"<code>room-invite</code> Event: messages",id:"room-invite-event-messages",level:3},{value:"<code>room-join</code> Event: messages",id:"room-join-event-messages",level:3},{value:"<code>room-leave</code> Event: messages",id:"room-leave-event-messages",level:3},{value:"System events",id:"system-events",level:2},{value:"<code>ready</code> Event",id:"ready-event",level:3},{value:"<code>heartbeat</code> Event: messages",id:"heartbeat-event-messages",level:3},{value:"<code>error</code> Event",id:"error-event",level:3}],i={toc:c};function d(e){let{components:a,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},i,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"The wechaty bot is available in various programming languages!")),(0,l.kt)("p",null,"Before starting this guide, make sure you are already familiar with the ding dong bot. If not, go to ",(0,l.kt)("a",{parentName:"p",href:"https://wechaty.js.org/docs/examples/basic/ding-dong-bot"},"examples/basics"),". In this section, you will learn how to add various events to a bot. Events are functions that define the operations a bot can perform. Some common events include ",(0,l.kt)("inlineCode",{parentName:"p"},"login"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"logout"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"onMessage"),". The guide will demonstrate in JavaScript, but you can choose between various programming languages available."),(0,l.kt)("h2",{id:"getting-started"},"Getting started"),(0,l.kt)("ol",null,(0,l.kt)("li",null,"Create an empty project folder"),(0,l.kt)("li",null," Add a bot.js file"),(0,l.kt)("li",null,"In the terminal, type the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm init\n")),(0,l.kt)("p",null,"A package.json file is created."),(0,l.kt)("li",null,"In the terminal, install the necessary dependencies"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm i qrcode-terminal wechaty \n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"}," npm i wechaty-puppet-PUPPET-PROVIDER\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("i",null,"PUPPET-PROVIDER")," represents the messaging platform you want to integrate your bot with."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For WhatsApp:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"}," npm i wechaty-puppet-whatsapp\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For WeChat:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"}," npm i wechaty-puppet-wechat\n")),(0,l.kt)("li",null," In the package.json file, add a script:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'"start": "node bot.js"')),(0,l.kt)("img",{src:"../../static/img/docs/howto/event/package-json.webp"}),(0,l.kt)("li",null," In the terminal, type the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"}," export WECHATY_LOG=verbose\n")),(0,l.kt)("ul",null,(0,l.kt)("li",null," For WhatsApp:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"export WECHATY_PUPPET=wechaty-puppet-whatsaap\n")),(0,l.kt)("li",null,"For WeChat:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"export WECHATY_PUPPET=wechaty-puppet-wechat\n"))),(0,l.kt)("li",null,"Now, we can run the bot using the command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm start\n")),(0,l.kt)("p",null,"But, before that we need to add events to the bot. See the following examples:")),(0,l.kt)("h2",{id:"basic-events"},"Basic Events"),(0,l.kt)("h3",{id:"scan-event"},(0,l.kt)("inlineCode",{parentName:"h3"},"scan")," Event"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"scan")," event generates a QR code to integrate your bot to a puppet provider."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { ScanStatus } from 'wechaty'\n\nasync function onScan (\n  qrcode: undefined | string,\n  status: ScanStatus,\n) {\n  console.info('Scan QR Code to login, status:', status, ScanStatus[status])\n  console.info('https://wechaty.js.org/qrcode/' + encodeURIComponent(qrcode))\n}\n\nbot.on('scan', onScan)\nawait bot.start()\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Wechaty,ScanStatus,log }  from 'wechaty'\n\nasync function onScan (qrcode,status)\n {\n  console.info('Scan QR Code to login, status:', status, ScanStatus[status])\n  console.info('https://wechaty.js.org/qrcode/' + encodeURIComponent(qrcode))\n}\n\nconst bot = new Wechaty({\n    name: 'bot-name',\n  })\n\nbot.on('scan', onScan)\nbot.start()\n  .then(() => log.info('StarterBot', 'Starter Bot Started.'))\n  .catch(e => log.error('StarterBot', e))\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty, ScanStatus\nfrom typing import Optional\nimport asyncio\n\n# method one\ndef on_scan (qrcode, status):\n    print('Scan QR Code to login: {}\\n'.format(staus))\n    print('https://wechaty.js.org/qrcode/{}'.format(qrcode))\n\nbot = Wechaty()\nbot.on('scan', on_scan)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_scan(self, qr_code: str, status: ScanStatus, data: Optional[str]):\n        \"\"\"listen scan event\"\"\"\n        print('Scan QR Code to login: {}\\n'.format(staus))\n        print('https://wechaty.js.org/qrcode/{}'.format(qrcode))\n\nasyncio.run(MyBot().start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h3",{id:"login-event-bot-contact"},(0,l.kt)("inlineCode",{parentName:"h3"},"login")," Event: bot contact"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"login")," event logs the bot in, with the contact of the user."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Contact } from 'wechaty'\n\nfunction onLogin (bot: Contact) {\n  console.info('Bot logged in:', bot)\n}\n\nbot.on('login', onLogin)\nawait bot.start()\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function onLogin (bot) {\n  console.info('Bot logged in:', bot)\n}\n\nbot.on('login', onLogin)\nawait bot.start()\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty, Contact\nfrom typing import Optional\nimport asyncio\n\n# method one\ndef on_login (contact: Contact):\n  print(f'User {contact} logged in\\n')\n\nbot.on('login', on_login)\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_login(self, contact: Contact):\n        print(f'User {contact} logged in\\n')\n\nasyncio.run(MyBot().start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h3",{id:"logout-event"},(0,l.kt)("inlineCode",{parentName:"h3"},"logout")," Event"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"logout")," event logs the bot out."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function onLogout (user) {\n  log.info('StarterBot', '%s logout', user)\n}\nbot.on('logout',  onLogout)\nawait bot.start()\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty, Contact\nimport asyncio\n\n# method one\nasync def on_logout(contact: Contact):\n    print(f'User <{contact}> logout')\n\nbot = MyBot()\nbot.on('logout', on_logout)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_logout(self, contact: Contact):\n        print(f'User <{contact}> logout')\n\nasync def start():\n    await MyBot().start()\n\nasyncio.run(start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h3",{id:"message-event"},(0,l.kt)("inlineCode",{parentName:"h3"},"message")," Event"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"message")," event notifies you when a new message arrives."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Message } from 'wechaty'\n\nfunction onMessage (message: Message) {\n  console.info('New message:', message)\n}\n\nbot.on('message', onMessage)\nawait bot.start()\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function onMessage (message) {\n  console.info('New message:', message)\n}\n\nbot.on('message', onMessage)\nawait bot.start()\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty, Message\nimport asyncio\n\n# method one\nasync def on_message(msg: Message):\n    print(f'receive message <{msg}>')\n\nbot = MyBot()\nbot.on('message', on_message)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_message(self, msg: Message):\n        print(f'receive message <{msg}>')\n\nasyncio.run(MyBot().start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h3",{id:"friendship-event-friend-requests"},(0,l.kt)("inlineCode",{parentName:"h3"},"friendship")," Event: friend requests"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"friendship")," event alerts you when someone sends you a friend request."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"bot\n.on('friendship', async friendship => {\n  let logMsg\n  const fileHelper = bot.Contact.load('filehelper')\n\n  try {\n    logMsg = 'received `friend` event from ' + friendship.contact().name()\n    await fileHelper.say(logMsg)\n    console.log(logMsg)\n\n    switch (friendship.type()) {\n      /**\n       *\n       * 1. New Friend Request\n       *\n       * when request is set, we can get verify message from `request.hello`,\n       * and accept this request by `request.accept()`\n       */\n      case Friendship.Type.Receive:\n        if (friendship.hello() === 'ding') {\n          logMsg = 'accepted automatically because verify messsage is \"ding\"'\n          console.log('before accept')\n          await friendship.accept()\n\n          // if want to send msg , you need to delay sometimes\n          await new Promise(r => setTimeout(r, 1000))\n          await friendship.contact().say('hello from Wechaty')\n          console.log('after accept')\n\n        } else {\n          logMsg = 'not auto accepted, because verify message is: ' + friendship.hello()\n        }\n        break\n\n        /**\n         *\n         * 2. Friend Ship Confirmed\n         *\n         */\n      case Friendship.Type.Confirm:\n        logMsg = 'friend ship confirmed with ' + friendship.contact().name()\n        break\n    }\n  } catch (e) {\n    logMsg = e.message\n  }\n\n  console.log(logMsg)\n  await fileHelper.say(logMsg)\n\n})\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty, Friendship\nimport asyncio\n\n# method one\nasync def on_friendship(friendship: Friendship):\n    print(f'receive friendship<{friendship}> event')\n\nbot = MyBot()\nbot.on('friendship', on_friendship)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_friendship(self, friendship: Friendship):\n        print(f'receive friendship<{friendship}> event')\n\nasyncio.run(MyBot().start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h2",{id:"room-events"},"Room Events"),(0,l.kt)("h3",{id:"room-topic-event-messages"},(0,l.kt)("inlineCode",{parentName:"h3"},"room-topic")," Event: messages"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"room-topic")," event alerts you when someone changes the room topic."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'bot\n.on(\'room-topic\', async function(room, topic, oldTopic, changer) {\n  try {\n    log.info(\'Bot\', \'EVENT: room-topic - Room "%s" change topic from "%s" to "%s" by member "%s"\',\n                    room,\n                    oldTopic,\n                    topic,\n                    changer,\n                )\n    await room.say(`room-topic - change topic from "${oldTopic}" to "${topic}" by member "${changer.name()}"` )\n  } catch (e) {\n    log.error(\'Bot\', \'room-topic event exception: %s\', e.stack)\n  }\n})\n'))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty, Room, Contact\nfrom datetime import datetime\nimport asyncio\n\n# method one\nasync def on_room_topic(room: Room, new_topic: str, old_topic: str, changer: Contact, date: datetime):\n    print(f'receive room topic changed event <from<{new_topic}> to <{old_topic}>> from room<{room}> ')\n\nbot = MyBot()\nbot.on('room-topic', on_room_topic)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_room_topic(self, room: Room, new_topic: str, old_topic: str, changer: Contact, date: datetime):\n        print(f'receive room topic changed event <from<{new_topic}> to <{old_topic}>> from room<{room}> ')\n\nasyncio.run(MyBot().start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h3",{id:"room-invite-event-messages"},(0,l.kt)("inlineCode",{parentName:"h3"},"room-invite")," Event: messages"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"room-invite")," event alerts you when there is a room invitation."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const bot = new Wechaty()\nbot.on('room-invite', async roomInvitation => {\n  try {\n    console.log(`received room-invite event.`)\n    await roomInvitation.accept()\n  } catch (e) {\n    console.error(e)\n  }\n}\n.start()\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty, RoomInvitation\nimport asyncio\n\n\n# method one\nasync def on_room_invite(room_invitation: RoomInvitation):\n    print(f'receive room invitation<{room_invitation}> event')\n\nbot = MyBot()\nbot.on('room-invite', on_room_invite)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_room_invite(self, room_invitation: RoomInvitation):\n        print(f'receive room invitation<{room_invitation}> event')\n\nasyncio.run(MyBot().start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h3",{id:"room-join-event-messages"},(0,l.kt)("inlineCode",{parentName:"h3"},"room-join")," Event: messages"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"room-join")," event alerts you when anyone joins the room."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"bot\n.on('room-join', async function(room, inviteeList, inviter) {\n  log.info( 'Bot', 'EVENT: room-join - Room \"%s\" got new member \"%s\", invited by \"%s\"',\n            await room.topic(),\n            inviteeList.map(c => c.name()).join(','),\n            inviter.name(),\n          )\n  console.log('bot room-join room id:', room.id)\n  const topic = await room.topic()\n  await room.say(`welcome to \"${topic}\"!`, inviteeList[0])\n})\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty, Contact, Room\nfrom typing import List\nfrom datetime import datetime\nimport asyncio\n\n# method one\nasync def on_room_join(room: Room, invitees: List[Contact], inviter: Contact, date: datetime):\n    print(f'receive room join event from Room<{room}>')\n\nbot = Wechaty()\nbot.on('room-join', on_room_join)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_room_join(self, room: Room, invitees: List[Contact], inviter: Contact, date: datetime):\n        print(f'receive room join event from Room<{room}>')\n\nasyncio.run(MyBot().start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h3",{id:"room-leave-event-messages"},(0,l.kt)("inlineCode",{parentName:"h3"},"room-leave")," Event: messages"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"room-leave")," event alerts you when anyone leaves the room."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"bot\n.on('room-leave', async function(room, leaverList) {\n  log.info('Bot', 'EVENT: room-leave - Room \"%s\" lost member \"%s\"',\n                  await room.topic(),\n                  leaverList.map(c => c.name()).join(','),\n              )\n  const topic = await room.topic()\n  const name  = leaverList[0] ? leaverList[0].name() : 'no contact!'\n  await room.say(`kick off \"${name}\" from \"${topic}\"!` )\n})\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty, Contact, Room\nfrom typing import List\nfrom datetime import datetime\nimport asyncio\n\n# method one\nasync def on_room_leave(room: Room, leavers: List[Contact], remover: Contact, date: datetime):\n    print(f'receive room leave event from Room<{room}>')\n\nbot = Wechaty()\nbot.on('room-leave', on_room_leave)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_room_leave(self, room: Room, leavers: List[Contact], remover: Contact, date: datetime):\n        print(f'receive room leave event from Room<{room}>')\n\nasyncio.run(MyBot().start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h2",{id:"system-events"},"System events"),(0,l.kt)("h3",{id:"ready-event"},(0,l.kt)("inlineCode",{parentName:"h3"},"ready")," Event"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ready")," event is executed when all data has been loaded successfully."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"    const contact = this.wechaty.Contact.load(contactId)\n    await contact.ready()\n    return contact\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'from wechaty import Wechaty\nfrom wechaty_puppet import EventReadyPayload\nimport asyncio\n\n# method one\nasync def on_ready(payload: EventReadyPayload):\n    """Any initialization work can be put in here\n\n    Args:\n        payload (EventReadyPayload): ready data\n    """\n    print(f\'receive ready event<{payload}>\')\n\nbot = Wechaty()\nbot.on(\'ready\', on_ready)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_ready(self, payload: EventReadyPayload):\n        """Any initialization work can be put in here\n\n        Args:\n            payload (EventReadyPayload): ready data\n        """\n        print(f\'receive ready event<{payload}>\')\n        \nasyncio.run(MyBot().start())\n'))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h3",{id:"heartbeat-event-messages"},(0,l.kt)("inlineCode",{parentName:"h3"},"heartbeat")," Event: messages"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Heartbeat")," event helps to send emojis to a specified contact or group periodically."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n    contact: 'filehelper', // contact who will receive the emoji\n    emoji: {\n        heartbeat: '\ud83d\ude0e', // the emoji to send\n    },\n    intervalSeconds: 60, // sends the emoji after an interval of 60 seconds\n}\nbot.use(\n    Heartbeat(config),\n)\nbot.start()\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty\nfrom wechaty_puppet import EventHeartbeatPayload\nimport asyncio\n\n# method one\nasync def on_heartbeat(payload: EventHeartbeatPayload):\n    print(f'receive heartbeat event from server <{payload}>')\n\nbot = Wechaty()\nbot.on('heartbeat', on_heartbeat)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_heartbeat(self, payload: EventHeartbeatPayload):\n        print(f'receive heartbeat event from server <{payload}>')\n        \nasyncio.run(MyBot().start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,l.kt)("h3",{id:"error-event"},(0,l.kt)("inlineCode",{parentName:"h3"},"error")," Event"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"error")," event makes the bot to throw an error whenever an error is encounterd."),(0,l.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function onError (e) {\n  console.error('Bot error:', e)\n}\nbot.on('error',  onError)\nfunction onLogin (bot) {\n  console.info('Bot logged in:', bot)\n}\n\nbot.on('login', onLogin)\nawait bot.start()\n"))),(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty\nfrom wechaty_puppet import EventErrorPayload\nimport asyncio\n\n# method one\nasync def on_error(payload: EventErrorPayload):\n    print(f'receive error event<{payload}> from sever')\n\nbot = Wechaty()\nbot.on('error', on_error)\nasyncio.run(bot.start())\n\n# method two (suggested)\nclass MyBot(Wechaty):\n    async def on_error(self, payload: EventErrorPayload):\n        print(f'receive error event<{payload}> from sever')\n        \nasyncio.run(MyBot().start())\n"))),(0,l.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,l.kt)(s.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))))}d.isMDXComponent=!0}}]);