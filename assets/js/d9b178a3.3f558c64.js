"use strict";(self.webpackChunkwechaty_docusaurus=self.webpackChunkwechaty_docusaurus||[]).push([[7201],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(87462),r=n(67294),o=n(86010),i=n(72389),s=n(67392),l=n(7094),c=n(12466);const u="tabList__CuJ",p="tabItem_LNqP";function d(e){const{lazy:t,block:n,defaultValue:i,values:d,groupId:h,className:m}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=d??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,s.l)(y,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===i?i:i??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==g&&!y.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,l.U)(),[k,T]=(0,r.useState)(g),N=[],{blockElementScrollPositionUntilNextRender:q}=(0,c.o5)();if(null!=h){const e=v[h];null!=e&&e!==k&&y.some((t=>t.value===e))&&T(e)}const O=e=>{const t=e.currentTarget,n=N.indexOf(t),a=y[n].value;a!==k&&(q(t),T(a),null!=h&&w(h,String(a)))},x=e=>{let t=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;t=N[n]??N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;t=N[n]??N[N.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},m)},y.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:e=>N.push(e),onKeyDown:x,onClick:O},i,{className:(0,o.Z)("tabs__item",p,i?.className,{"tabs__item--active":k===t})}),n??t)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==k})))))}function h(e){const t=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},27742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=n(65488),i=n(85162);const s={title:"Send and accept friend requests"},l=void 0,c={unversionedId:"howto/friendship",id:"howto/friendship",title:"Send and accept friend requests",description:"Sending and accepting friend requests can easily be done using wechaty onfriendship function. This guide will help you send request, receive request(in friend event), confirm friendship(friend event) in a room.",source:"@site/docs/howto/friendship.mdx",sourceDirName:"howto",slug:"/howto/friendship",permalink:"/docs/howto/friendship",draft:!1,editUrl:"https://github.com/wechaty/docusaurus/edit/main/docusaurus/docs/howto/friendship.mdx",tags:[],version:"current",lastUpdatedBy:"Abhishek Jaiswal",lastUpdatedAt:1635078728,formattedLastUpdatedAt:"Oct 24, 2021",frontMatter:{title:"Send and accept friend requests"},sidebar:"docs",previous:{title:"Managing rooms",permalink:"/docs/howto/room"},next:{title:"Send and receive files",permalink:"/docs/howto/file-box"}},u={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"If you don&#39;t know where to start from",id:"if-you-dont-know-where-to-start-from",level:3},{value:"Send Request - define how to send a friend request",id:"send-request---define-how-to-send-a-friend-request",level:2},{value:"Receive Request - define how to accept the friend request",id:"receive-request---define-how-to-accept-the-friend-request",level:2}],d={toc:p};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Sending and accepting friend requests can easily be done using wechaty ",(0,r.kt)("inlineCode",{parentName:"p"},"onfriendship")," function. This guide will help you send request, receive request(in friend event), confirm friendship(friend event) in a room."),(0,r.kt)("p",null,"Use the guide to help you integrate additional functions to an existing project which is present at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/wechaty/wechaty-getting-started/blob/main/examples/advanced/friend-bot.js"},"Github/Friend-Bot")," or check that your existing local system will run on Wechaty. If, you wish to learn on how to build the bot on your own, please visit one of our ",(0,r.kt)("a",{parentName:"p",href:"https://wechaty.js.org/docs/getting-started/running-locally"},"Building the bot")," section."),(0,r.kt)("p",null,"The steps outlined here mainly focuses on working with Javascript, but user are free to switch between any languages.This guide help you Send, receive friend request, and friend confirmation events."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Your system must have ",(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/package-manager/"},"Node.js")," installed (version >= 16)."),(0,r.kt)("li",{parentName:"ul"},"Your system must have ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/wechaty/wechaty"},"Wechaty")," (version >= 0.40)."),(0,r.kt)("li",{parentName:"ul"},"You need to be familiar with the basics of Wechaty platform. If not, follow our ",(0,r.kt)("a",{parentName:"li",href:"https://wechaty.js.org/docs/tutorials/"},"tutorials")," section."),(0,r.kt)("li",{parentName:"ul"},"You need to have at least a minimal application ready to work, follow one of our ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/wechaty/getting-started/blob/main/examples/ding-dong-bot.js"},"Example/ding-dong-bot"),".")),(0,r.kt)("h3",{id:"if-you-dont-know-where-to-start-from"},"If you don't know where to start from"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://wechaty.js.org/docs/getting-started/quick-start/#run-ding-dong-bot"},"Running our first ding-dong bot"),"."),(0,r.kt)("p",null,"The below function needs a basic script that can help run the bot. The basic script starts by importing the code from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/wechaty/wechaty-getting-started/blob/main/examples/advanced/friend-bot.js"},"Github/Friend-Bot"),".Integrate the below code, for this action to work."),(0,r.kt)("h2",{id:"send-request---define-how-to-send-a-friend-request"},"Send Request - define how to send a friend request"),(0,r.kt)("p",null,"When you send the request, you try to make new friend connection. This section elaborates on how to send friend requests.",(0,r.kt)("inlineCode",{parentName:"p"},"Friendship.search(<id>)"),' helps you search the contact, if found we get "Sending friend request..." as a response else "Friendship.search: not found" as a response.'),(0,r.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"async function onReady () {\n  const weixin  = 'FridayBOT' // weixin id\n  const contact = await bot.Friendship.search({ weixin })\n\n  if (contact) {\n    console.info('Sending friend request...')\n    await bot.Friendship.add(contact)\n  } else {\n    console.info('Friendship.search: not found')\n  }\n}\n\nbot.on('ready', onReady)\n"))),(0,r.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async function onReady () {\n  const weixin  = 'FridayBOT' // weixin id\n  const contact = await bot.Friendship.search({ weixin })\n\n  if (contact) {\n    console.info('Sending friend request...')\n    await bot.Friendship.add(contact)\n  } else {\n    console.info('Friendship.search: not found')\n  }\n}\n\nbot.on('ready', onReady)\n"))),(0,r.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from typing import Optional\nfrom wechaty import Wechaty, Contact\n\nclass MyBot(Wechaty):\n    async def on_ready(self, _):\n        contact: Optional[Contact] = await self.Friendship.search(phone='phone-of-someone')\n        if contact:\n            self.Friendship.add(contact)\n"))),(0,r.kt)(i.Z,{value:"go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,r.kt)(i.Z,{value:"php",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,r.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,r.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,r.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))),(0,r.kt)("h2",{id:"receive-request---define-how-to-accept-the-friend-request"},"Receive Request - define how to accept the friend request"),(0,r.kt)("p",null,"When someone sends you the request, you choose whether to have the friend connection or to reject the connection. This section elaborates on how to accept friend requests. When someone sends you the request, the ",(0,r.kt)("inlineCode",{parentName:"p"},"friendship.contact()")," helps you list down all the contacts with a hello message from ",(0,r.kt)("inlineCode",{parentName:"p"},"friendship.hello()")," and then when the user accepts the request, it prints out with a confirmation message using ",(0,r.kt)("inlineCode",{parentName:"p"},"friendship.contact().name()"),"."),(0,r.kt)(o.Z,{groupId:"programming-languages",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"PHP",value:"php"},{label:"Scala",value:"scala"},{label:"C#",value:"csharp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Friendship } from 'wechaty'\n\nasync function onFriendship (friendship: Friendship) {\n  if (friendship.type() === Friendship.Type.Receive) {\n    console.info('New request from', friendship.contact())\n    console.info('Hello message:', friendship.hello())\n    await friendship.accept()\n  } else if (friendship.type() === Friendship.Type.Confirm) {\n    console.info('New request confirmed with', friendship.contact().name())\n  }\n}\n\nbot.on('friendship', onFriendship)\n"))),(0,r.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Friendship } from 'wechaty'\n\nasync function onFriendship (friendship) {\n  if (friendship.type() === Friendship.Type.Receive) {\n    console.info('New request from', friendship.contact())\n    console.info('Hello message:', friendship.hello())\n    await friendship.accept()\n  } else if (friendship.type() === Friendship.Type.Confirm) {\n    console.info('New request confirmed with', friendship.contact().name())\n  }\n}\n\nbot.on('friendship', onFriendship)\n"))),(0,r.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from wechaty import Wechaty, Friendship, FriendshipType\n\nclass MyBot(Wechaty):\n    async def on_friendship(self, friendship: Friendship):\n        if friendship.type() == FriendshipType.FRIENDSHIP_TYPE_RECEIVE:\n            await friendship.accept()\n"))),(0,r.kt)(i.Z,{value:"go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// TODO: Pull Request is welcome!\n"))),(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// TODO: Pull Request is welcome!\n"))),(0,r.kt)(i.Z,{value:"php",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"// TODO: Pull Request is welcome!\n"))),(0,r.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"// TODO: Pull Request is welcome!\n"))),(0,r.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"// TODO: Pull Request is welcome!\n"))),(0,r.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// TODO: Pull Request is welcome!\n")))))}h.isMDXComponent=!0}}]);